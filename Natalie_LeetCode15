class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList<List<Integer>>();
        Set<List<Integer>> hash = new HashSet<List<Integer>>();
        Arrays.sort(nums);
        if(nums.length<3 || nums[nums.length-1]<0 || nums[0]>0){
            return ans;
        }
        for(int i = 0;i<nums.length;i++){
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue;
            }
            int left = i+1, right = nums.length-1;
            while(left < right){
                //if(left == i || right == i){continue;}
                if(nums[left]+nums[right]+nums[i] == 0){
                    List<Integer> tmp = new ArrayList<Integer>();
                    tmp.add(nums[left]);
                    tmp.add(nums[i]);
                    tmp.add(nums[right]);
                    Collections.sort(tmp);
                    hash.add(tmp);
                    while (left < right && nums[left] == nums[left + 1]) { 
                        left++; 
                    }                     
                    while (left < right && nums[right] == nums[right - 1]) { 
                        right--; 
                    }
                    left ++;
                    right --;
                }else if(nums[left]+nums[right]+nums[i] < 0){
                    left += 1;
                }else{
                    right -= 1;
                }
            }
        }
        for(List<Integer> h: hash){
            ans.add(h);
        }
        return ans;
//         List<List<Integer>> res = new ArrayList<>();

//         Arrays.sort(nums);

//         int len = nums.length;

//         if (len < 3 || nums[0] > 0 || nums[len - 1] < 0) {
//             return res;
//         }

//         for (int i = 0; i < nums.length; i++) {

// 			// Notice that the solution set must not contain duplicate triplets.
//             if (i > 0 && nums[i] == nums[i - 1]) {
//                 continue;
//             }

//             int left = i + 1;
//             int right = len - 1;

//             while (left < right) {
//                 int sum = nums[left]  + nums[right] + nums[i];
                
//                 if (sum ==0) {
//                     res.add(Arrays.asList(nums[left], nums[i], nums[right]));
                    
// 					// Notice that the solution set must not contain duplicate triplets.
//                   // So skipped duplicate items from left and right.
//                     while (left < right && nums[left] == nums[left + 1]) { left++; }
//                     while (left < right && nums[right] == nums[right - 1]) { right--; }
                    
//                     left++;
//                     right--;
                    
//                 } else if (sum > 0) {right--;
//                 } else {
//                     left++;
//                 }
//             }
//         }
//         return res;
    }
}
