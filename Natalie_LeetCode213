class Solution {
    public int rob(int[] nums) {
        int len = nums.length;
        if(len == 1){return nums[0];}
        if(len == 2){
            return Math.max(nums[0],nums[1]);
        }
        int[] dp1 = new int[len-1];
        int[] ntwo = new int[len-1];
        for (int i=1;i<len;i++){
            ntwo[i-1] = nums[i];
        }
        // ntwo[len-1] = nums[0];
        dp1[0] = nums[0];
        dp1[1] = Math.max(nums[0],nums[1]);
        for(int j = 2; j<len-1; j++){
            dp1[j] = Math.max(dp1[j-2]+nums[j],dp1[j-1]);
        }
        int[] dp2 = new int[len-1];
        dp2[0] = ntwo[0];
        dp2[1] = Math.max(ntwo[0], ntwo[1]);
        for(int k = 2; k<len-1; k++){
            dp2[k] = Math.max(dp2[k-2]+ntwo[k], dp2[k-1]);
        }
        return Math.max(dp1[len-2],dp2[len-2]);
        // 第一个和最后一个最多保留一个，所以拆分成两个数组，一个到倒数第二个，一个从第二个开始
    }
}
